{"remainingRequest":"F:\\Program\\Java\\Practice_Projects\\SpringBoot_Practices\\KrislinBlog\\blog-vue\\node_modules\\babel-loader\\lib\\index.js!F:\\Program\\Java\\Practice_Projects\\SpringBoot_Practices\\KrislinBlog\\blog-vue\\node_modules\\eslint-loader\\index.js??ref--13-0!F:\\Program\\Java\\Practice_Projects\\SpringBoot_Practices\\KrislinBlog\\blog-vue\\src\\utils\\http.js","dependencies":[{"path":"F:\\Program\\Java\\Practice_Projects\\SpringBoot_Practices\\KrislinBlog\\blog-vue\\src\\utils\\http.js","mtime":1594899416252},{"path":"F:\\Program\\Java\\Practice_Projects\\SpringBoot_Practices\\KrislinBlog\\blog-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\Program\\Java\\Practice_Projects\\SpringBoot_Practices\\KrislinBlog\\blog-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\Program\\Java\\Practice_Projects\\SpringBoot_Practices\\KrislinBlog\\blog-vue\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBzdG9yZSBmcm9tICcuLi9zdG9yZSc7IC8vIOW8leWFpWVsZW1lbnQtdWnkvp3otZYKCmltcG9ydCBFbGVtZW50IGZyb20gJ2VsZW1lbnQtdWknOwppbXBvcnQgcm91dGVyIGZyb20gIi4uL3JvdXRlciI7IC8v5Yib5bu6YXhpb3Plrp7kvovvvIzlnKjov5nph4zlj6/ku6Xorr7nva7or7fmsYLnmoTpu5jorqTphY3nva4KCnZhciBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7CiAgYmFzZVVSTDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODQ0MycsCiAgLy/moLnmja7oh6rlt7HphY3nva7nmoTlj43lkJHku6PnkIbljrvorr7nva7kuI3lkIznjq/looPnmoRiYXNlVXJsCiAgdGltZW91dDogMTAwMDAgLy8g6K6+572u6LaF5pe25pe26Ze0MTBzCgp9KTsgLy8g5paH5qGj5Lit55qE57uf5LiA6K6+572ucG9zdOivt+axguWktOOAggoKaW5zdGFuY2UuZGVmYXVsdHMuaGVhZGVycy5wb3N0WydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCc7IC8v6K+35rGC5oum5oiq5ZmoCgppbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykgewogIC8vIC8vIOavj+asoeWPkemAgeivt+axguS5i+WJjeWIpOaWreaYr+WQpuWtmOWcqHRva2Vu77yM5aaC5p6c5a2Y5Zyo77yM5YiZ57uf5LiA5ZyoaHR0cOivt+axgueahGhlYWRlcumDveWKoOS4inRva2Vu77yM5LiN55So5q+P5qyh6K+35rGC6YO95omL5Yqo5re75Yqg5LqGCiAgLy8gLy8g5Y2z5L2/5pys5Zyw5a2Y5ZyodG9rZW7vvIzkuZ/mnInlj6/og710b2tlbuaYr+i/h+acn+eahO+8jOaJgOS7peWcqOWTjeW6lOaLpuaIquWZqOS4reimgeWvuei/lOWbnueKtuaAgei/m+ihjOWIpOaWrQogIC8vIGNvbnN0IHRva2VuID0gc3RvcmUuc3RhdGUudG9rZW47CiAgLy8gdG9rZW4gJiYgKGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSB0b2tlbik7CiAgcmV0dXJuIGNvbmZpZzsKfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgcmV0dXJuIFByb21pc2UuZXJyb3IoZXJyb3IpOwp9KTsgLy/lk43lupTmi6bmiKrlmagKCmluc3RhbmNlLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgdmFyIHJlc3VsdCA9IHJlc3BvbnNlLmRhdGE7CiAgY29uc29sZS5sb2coIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKTsKICBjb25zb2xlLmxvZyhyZXN1bHQpOwogIGNvbnNvbGUubG9nKCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIik7CgogIGlmIChyZXN1bHQpIHsKICAgIHJlc3VsdC5tZXNzYWdlID0gcmVzcG9uc2UuZGF0YS5tc2c7CiAgfQoKICBpZiAocmVzdWx0LmNvZGUgPT0gMjAwKSB7CiAgICAvL0VsZW1lbnQuTWVzc2FnZS5zdWNjZXNzKCLnmbvlvZXmiJDlip8sIOasoui/juWbnuadpSAhIikKICAgIEVsZW1lbnQuTWVzc2FnZS5zdWNjZXNzKHJlc3VsdC5tZXNzYWdlKTsKICAgIHJldHVybiByZXNwb25zZTsgLy/mlL7ooYwKICB9IGVsc2UgewogICAgLy9FbGVtZW50Lk1lc3NhZ2UuZXJyb3IoJ+WvhueggemUmeivrywg6K+35bCd6K+V6YeN5paw55m75b2VICEnKTsKICAgIEVsZW1lbnQuTWVzc2FnZS5lcnJvcihyZXN1bHQubWVzc2FnZSk7CiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVzcG9uc2UuZGF0YS5tc2cpOyAvL+aKm+WHuuW8guW4uCwg6Zi75q2i6L+b5YWlIiRheGlvcy5wb3N0KC4uIgogIH0KfSwgLy8g5o2V6I635bm25aSE55CG5ZCO5Y+w5byC5bi45L+h5oGvCmZ1bmN0aW9uIChlcnJvcikgewogIC8vIOS9v+W+l+W8guW4uOS/oeaBr+abtOWKoOWPi+WlvQogIGlmIChlcnJvci5yZXNwb25zZS5kYXRhKSB7CiAgICAvL2RhdGHkuI3kuLrnqbrml7YKICAgIGVycm9yLm1lc3NhZ2UgPSBlcnJvci5yZXNwb25zZS5kYXRhLm1zZzsKICAgIGNvbnNvbGUubG9nKCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIik7CiAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTsKICAgIGNvbnNvbGUubG9nKCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIik7CiAgfQoKICBpZiAoZXJyb3IucmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHsKICAgIC8vU2hpcm/orqTor4HplJnor68KICAgIHN0b3JlLmNvbW1pdCgiUkVNT1ZFX0lORk8iKTsgLy/muIXpmaTnlKjmiLfkv6Hmga86dG9rZW7lj4p1c2VySW5mbwoKICAgIHJvdXRlci5wdXNoKCIvbG9naW4iKTsgLy/ot7PovazliLDnmbvlvZXpobXpnaIKICB9CgogIEVsZW1lbnQuTWVzc2FnZS5lcnJvcihlcnJvci5tZXNzYWdlKTsKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOyAvL+aKm+WHuuW8guW4uCwg6Zi75q2i6L+b5YWlIiRheGlvcy5wb3N0KC4uIgp9KTs="},{"version":3,"sources":["F:/Program/Java/Practice_Projects/SpringBoot_Practices/KrislinBlog/blog-vue/src/utils/http.js"],"names":["axios","store","Element","router","instance","create","baseURL","timeout","defaults","headers","post","interceptors","request","use","config","error","Promise","response","result","data","console","log","message","msg","code","Message","success","reject","status","commit","push"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CAEA;;AACA,IAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,uBADmB;AACM;AAClCC,EAAAA,OAAO,EAAE,KAFmB,CAEZ;;AAFY,CAAb,CAAjB,C,CAKA;;AACAH,QAAQ,CAACI,QAAT,CAAkBC,OAAlB,CAA0BC,IAA1B,CAA+B,cAA/B,IAAiD,iDAAjD,C,CAEA;;AACAN,QAAQ,CAACO,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACI,UAAAC,MAAM,EAAI;AACR;AACA;AACA;AACA;AACA,SAAOA,MAAP;AACD,CAPL,EAQI,UAAAC,KAAK,EAAI;AACP,SAAOC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAP;AACD,CAVL,E,CAaA;;AACAX,QAAQ,CAACO,YAAT,CAAsBM,QAAtB,CAA+BJ,GAA/B,CAAmC,UAAAI,QAAQ,EAAI;AACzC,MAAIC,MAAM,GAAGD,QAAQ,CAACE,IAAtB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;;AAEA,MAAGH,MAAH,EAAU;AACRA,IAAAA,MAAM,CAACI,OAAP,GAAiBL,QAAQ,CAACE,IAAT,CAAcI,GAA/B;AACD;;AACD,MAAIL,MAAM,CAACM,IAAP,IAAe,GAAnB,EAAwB;AACtB;AACAtB,IAAAA,OAAO,CAACuB,OAAR,CAAgBC,OAAhB,CAAwBR,MAAM,CAACI,OAA/B;AACA,WAAOL,QAAP,CAHsB,CAGN;AACjB,GAJD,MAIO;AACL;AACAf,IAAAA,OAAO,CAACuB,OAAR,CAAgBV,KAAhB,CAAsBG,MAAM,CAACI,OAA7B;AACA,WAAON,OAAO,CAACW,MAAR,CAAeV,QAAQ,CAACE,IAAT,CAAcI,GAA7B,CAAP,CAHK,CAGmC;AACzC;AACF,CAnBL,EAqBI;AACA,UAAAR,KAAK,EAAI;AACP;AACA,MAAIA,KAAK,CAACE,QAAN,CAAeE,IAAnB,EAAyB;AAAE;AACzBJ,IAAAA,KAAK,CAACO,OAAN,GAAgBP,KAAK,CAACE,QAAN,CAAeE,IAAf,CAAoBI,GAApC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,OAAlB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD;;AAED,MAAIN,KAAK,CAACE,QAAN,CAAeW,MAAf,KAA0B,GAA9B,EAAmC;AAAE;AACnC3B,IAAAA,KAAK,CAAC4B,MAAN,CAAa,aAAb,EADiC,CACL;;AAC5B1B,IAAAA,MAAM,CAAC2B,IAAP,CAAY,QAAZ,EAFiC,CAEX;AACvB;;AACD5B,EAAAA,OAAO,CAACuB,OAAR,CAAgBV,KAAhB,CAAsBA,KAAK,CAACO,OAA5B;AACA,SAAON,OAAO,CAACW,MAAR,CAAeZ,KAAf,CAAP,CAdO,CAcqB;AAC7B,CArCL","sourcesContent":["import axios from 'axios'\r\nimport store from '../store'\r\n// 引入element-ui依赖\r\nimport Element from 'element-ui'\r\nimport router from \"../router\";\r\n\r\n//创建axios实例，在这里可以设置请求的默认配置\r\nconst instance = axios.create({\r\n  baseURL: 'http://localhost:8443', //根据自己配置的反向代理去设置不同环境的baseUrl\r\n  timeout: 10000, // 设置超时时间10s\r\n})\r\n\r\n// 文档中的统一设置post请求头。\r\ninstance.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'\r\n\r\n//请求拦截器\r\ninstance.interceptors.request.use(\r\n    config => {\r\n      // // 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了\r\n      // // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\r\n      // const token = store.state.token;\r\n      // token && (config.headers.Authorization = token);\r\n      return config;\r\n    },\r\n    error => {\r\n      return Promise.error(error);\r\n    }\r\n)\r\n\r\n//响应拦截器\r\ninstance.interceptors.response.use(response => {\r\n      let result = response.data\r\n\r\n      console.log(\"-------------------------\")\r\n      console.log(result)\r\n      console.log(\"-------------------------\")\r\n\r\n      if(result){\r\n        result.message = response.data.msg\r\n      }\r\n      if (result.code == 200) {\r\n        //Element.Message.success(\"登录成功, 欢迎回来 !\")\r\n        Element.Message.success(result.message)\r\n        return response //放行\r\n      } else {\r\n        //Element.Message.error('密码错误, 请尝试重新登录 !');\r\n        Element.Message.error(result.message)\r\n        return Promise.reject(response.data.msg)//抛出异常, 阻止进入\"$axios.post(..\"\r\n      }\r\n    },\r\n\r\n    // 捕获并处理后台异常信息\r\n    error => {\r\n      // 使得异常信息更加友好\r\n      if (error.response.data) { //data不为空时\r\n        error.message = error.response.data.msg\r\n        console.log(\"-------------------------\")\r\n        console.log(error.message)\r\n        console.log(\"-------------------------\")\r\n      }\r\n\r\n      if (error.response.status === 401) { //Shiro认证错误\r\n        store.commit(\"REMOVE_INFO\") //清除用户信息:token及userInfo\r\n        router.push(\"/login\") //跳转到登录页面\r\n      }\r\n      Element.Message.error(error.message);\r\n      return Promise.reject(error)//抛出异常, 阻止进入\"$axios.post(..\"\r\n    }\r\n)\r\n"]}]}